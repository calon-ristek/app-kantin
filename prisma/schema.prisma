// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?    @unique
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Bookmark      Bookmark?
    Review        Review[]
    Upvote        Upvote[]
    Downvote      Downvote[]
    Reply         Reply[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Spot {
    RIK
    FPSI
    FISIP
    FEB
    FH
    FMIPA
    FT
    FKM
    VOKASI
    FASILKOM_LAMA
    FASILKOM_BARU
    ASRAMA
}

model Kantin {
    id         String      @id @default(cuid())
    name       String      @unique @db.VarChar(255)
    faculty    Spot
    TagKantin  TagKantin[]
    Bookmark   Bookmark?   @relation(fields: [bookmarkId], references: [id])
    bookmarkId String?
    embedUrl   String
    image      String
    Review     Review[]
}

model Reply {
    Review         Review @relation(fields: [reviewUserName, reviewKantinName], references: [userName, kantinName])
    reviewUserName   String
    reviewKantinName String
    message        String
    User           User   @relation(fields: [userName], references: [name])
    userName         String

    @@id([userName, reviewUserName, reviewKantinName])
}

model Review {
    userName    String
    User      User       @relation(fields: [userName], references: [name])
    kantinName  String
    Kantin    Kantin     @relation(fields: [kantinName], references: [name])
    score     Int
    message   String?
    anonymous Boolean    @default(false)
    Upvotes   Upvote[]
    Downvotes Downvote[]
    Replies   Reply[]

    @@id([userName, kantinName])
}

model Upvote {
    userName         String
    User           User   @relation(fields: [userName], references: [name])
    reviewId       String
    Review         Review @relation(fields: [reviewUserName, reviewKantinName], references: [userName, kantinName])
    reviewUserName   String
    reviewKantinName String

    @@id([userName, reviewId])
}

model Downvote {
    userName         String
    User           User   @relation(fields: [userName], references: [name])
    reviewId       String
    Review         Review @relation(fields: [reviewUserName, reviewKantinName], references: [userName, kantinName])
    reviewUserName   String
    reviewKantinName String

    @@id([userName, reviewId])
}

model Bookmark {
    id     String   @id @default(cuid())
    User   User     @relation(fields: [userId], references: [id])
    userId String   @unique
    Kantin Kantin[]
}

model Tag {
    id        String      @id @default(cuid())
    name      String      @unique
    TagKantin TagKantin[]
}

model TagKantin {
    kantinId String
    Kantin   Kantin @relation(fields: [kantinId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tagId    String
    Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([tagId, kantinId])
}
